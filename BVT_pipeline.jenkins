pipeline {
  agent any

  stages {
    stage('Build') {
        
      steps {
        echo 'Building...'
        echo "Running ${env.BUILD_ID} ${env.BUILD_DISPLAY_NAME} on ${env.NODE_NAME} and JOB ${env.JOB_NAME}"
        
        echo "Verifying python version"
        sh 'python3 --version'
        echo "Create python venv"
        sh 'apt-get install -y python3.11-venv'

        echo "Create and activate virtual environment"
        sh "cd ${JENKINS_HOME}/workspace/${env.JOB_NAME}/"
        sh 'python3 -m venv testing_venv'

        script {
          try {
            sh 'source testing_venv/bin/activate'
          }
          catch (Exception e) {
            sh '. testing_venv/bin/activate'
          }
        }

        echo 'Install required python modules.'
        sh "pip install -r requirements.txt --break-system-packages"
      }
    }

  stage('Test') {
    steps {
      echo 'Testing...'
      sh 'python3 -m pytest'
      }
    }
  }

  post {
    always {
      echo 'Install GitHub CLI'
      sh 'apt-get install wget -y'

      sh 'mkdir -p -m 755 /etc/apt/keyrings && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
      && chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
      && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
      && apt-get update \
      && apt-get install gh -y'

      echo 'Authenticate with PAT'
      sh "gh auth login --with-token < /var/jenkins_home/pat.txt"
    }

    success {
      echo 'Merge branches...'
      sh "gh pr merge $ghprbPullId -m"
    }

    unsuccessful {
      echo 'Close failed pull request...'
      sh "gh pr close $ghprbPullId -c 'Build Failed.'"
    }
  }
} 